#include <stdio.h>

// Função para mesclar dois subarrays ordenados
void merge(int arr[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    // Arrays temporários
    int L[n1], R[n2];

    // Copiando os dados para os arrays temporários
    for (int i = 0; i < n1; i++)
        L[i] = arr[left + i];
    
    for (int j = 0; j < n2; j++)
        R[j] = arr[mid + 1 + j];

    // Intercala os arrays L[] e R[]
    int i = 0, j = 0, k = left;
    
    while (i < n1 && j < n2) {
        if (L[i] <= R[j])
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }

    // Copia os elementos restantes de L[], se houver
    while (i < n1)
        arr[k++] = L[i++];

    // Copia os elementos restantes de R[], se houver
    while (j < n2)
        arr[k++] = R[j++];
}

// Função recursiva do Merge Sort
void mergeSort(int arr[], int left, int right) {
    if (left < right) {
        int mid = left + (right - left) / 2;

        // Ordena as duas metades
        mergeSort(arr, left, mid);
        mergeSort(arr, mid + 1, right);

        // Mescla as metades ordenadas
        merge(arr, left, mid, right);
    }
}

// Função para imprimir o array
void printArray(int arr[], int size) {
    for (int i = 0; i < size; i++)
        printf("%d ", arr[i]);
    printf("\n");
}

// Função principal
int main() {
    int arr[] = {5, 3, 8, 1};
    int size = sizeof(arr) / sizeof(arr[0]);

    printf("Array original: ");
    printArray(arr, size);

    mergeSort(arr, 0, size - 1);

    printf("Array ordenado: ");
    printArray(arr, size);

    return 0;
}
