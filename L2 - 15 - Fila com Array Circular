#include <stdio.h>
#include <stdlib.h>

#define TAMANHO 100

typedef struct {
    int fila[TAMANHO];
    int inicio;   // índice do primeiro elemento
    int fim;      // índice onde será inserido o próximo elemento
    int tamanho;  // quantidade de elementos atuais
} Fila;

// Inicializa a fila
void inicializar(Fila* f) {
    f->inicio = 0;
    f->fim = 0;
    f->tamanho = 0;
}

// Verifica se a fila está vazia
int esta_vazia(Fila* f) {
    return f->tamanho == 0;
}

// Verifica se a fila está cheia
int esta_cheia(Fila* f) {
    return f->tamanho == TAMANHO;
}

// Enfileira um elemento
int enfileirar(Fila* f, int valor) {
    if (esta_cheia(f)) return 0; // fila cheia

    f->fila[f->fim] = valor;
    f->fim = (f->fim + 1) % TAMANHO;
    f->tamanho++;
    return 1;
}

// Desenfileira um elemento
int desenfileirar(Fila* f, int* valor) {
    if (esta_vazia(f)) return 0; // fila vazia

    *valor = f->fila[f->inicio];
    f->inicio = (f->inicio + 1) % TAMANHO;
    f->tamanho--;
    return 1;
}

// Retorna o elemento da frente sem remover
int frente(Fila* f, int* valor) {
    if (esta_vazia(f)) return 0;

    *valor = f->fila[f->inicio];
    return 1;
}

// Função para imprimir fila (teste)
void imprimir_fila(Fila* f) {
    printf("Fila: ");
    for (int i = 0, idx = f->inicio; i < f->tamanho; i++, idx = (idx + 1) % TAMANHO) {
        printf("%d ", f->fila[idx]);
    }
    printf("\n");
}

int main() {
    Fila f;
    inicializar(&f);

    enfileirar(&f, 1);
    enfileirar(&f, 2);
    enfileirar(&f, 3);
    imprimir_fila(&f);

    int valor;
    if (desenfileirar(&f, &valor)) {
        printf("Desenfileirado: %d\n", valor);
    }
    imprimir_fila(&f);

    if (frente(&f, &valor)) {
        printf("Elemento da frente: %d\n", valor);
    }

    return 0;
}
