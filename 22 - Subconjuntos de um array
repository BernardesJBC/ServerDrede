#include <stdio.h>

void gerarSubconjuntos(int arr[], int n, int index, int aux[]) {
    if (index == n) {
        // Imprime o subconjunto atual
        printf("{");
        for (int i = 0; i < n; i++) {
            if (aux[i]) {
                printf("%d ", arr[i]);
            }
        }
        printf("}\n");
        return;
    }

    // Inclui o elemento atual
    aux[index] = 1;
    gerarSubconjuntos(arr, n, index + 1, aux);

    // Exclui o elemento atual
    aux[index] = 0;
    gerarSubconjuntos(arr, n, index + 1, aux);
}

int main() {
    int arr[] = {1, 2};
    int n = sizeof(arr) / sizeof(arr[0]);
    int aux[n]; // Vetor auxiliar

    gerarSubconjuntos(arr, n, 0, aux);

    return 0;
}
/////////////////////////////////////////////////////////////////////////////////////////////////

#include <stdio.h>

void merge(int arr[], int esquerda, int meio, int direita) {
    int n1 = meio - esquerda + 1;
    int n2 = direita - meio;

    int L[n1], R[n2];

    for (int i = 0; i < n1; i++)
        L[i] = arr[esquerda + i];
    for (int j = 0; j < n2; j++)
        R[j] = arr[meio + 1 + j];

    int i = 0, j = 0, k = esquerda;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j])
            arr[k++] = L[i++];
        else
            arr[k++] = R[j++];
    }

    while (i < n1) arr[k++] = L[i++];
    while (j < n2) arr[k++] = R[j++];
}

void mergeSort(int arr[], int esquerda, int direita) {
    if (esquerda < direita) {
        int meio = esquerda + (direita - esquerda) / 2;

        mergeSort(arr, esquerda, meio);
        mergeSort(arr, meio + 1, direita);
        merge(arr, esquerda, meio, direita);
    }
}

int main() {
    int arr[] = {5, 3, 8, 1};
    int n = sizeof(arr) / sizeof(arr[0]);

    mergeSort(arr, 0, n - 1);

    printf("Array ordenado: ");
    for (int i = 0; i < n; i++)
        printf("%d ", arr[i]);
    printf("\n");

    return 0;
}

