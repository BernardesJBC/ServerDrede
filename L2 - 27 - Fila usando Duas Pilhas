#include <stdio.h>
#include <stdlib.h>

#define TAM 100

typedef struct {
    int dados[TAM];
    int topo;
} Pilha;

void inicializar(Pilha* p) {
    p->topo = -1;
}

int push(Pilha* p, int valor) {
    if (p->topo == TAM - 1) return 0;
    p->dados[++(p->topo)] = valor;
    return 1;
}

int pop(Pilha* p, int* valor) {
    if (p->topo == -1) return 0;
    *valor = p->dados[(p->topo)--];
    return 1;
}

int topo(Pilha* p, int* valor) {
    if (p->topo == -1) return 0;
    *valor = p->dados[p->topo];
    return 1;
}

int vazia(Pilha* p) {
    return p->topo == -1;
}

// Fila usando duas pilhas
typedef struct {
    Pilha entrada;
    Pilha saida;
} FilaComPilhas;

void inicializar_fila(FilaComPilhas* f) {
    inicializar(&f->entrada);
    inicializar(&f->saida);
}

// Enfileira um valor (O(1))
int enfileirar(FilaComPilhas* f, int valor) {
    return push(&f->entrada, valor);
}

// Transfere elementos da entrada para a saída, se necessário
void transferir(Pilha* entrada, Pilha* saida) {
    int val;
    while (!vazia(entrada)) {
        pop(entrada, &val);
        push(saida, val);
    }
}

// Desenfileira (O(1) amortizado)
int desenfileirar(FilaComPilhas* f, int* valor) {
    if (vazia(&f->saida)) {
        transferir(&f->entrada, &f->saida);
    }
    return pop(&f->saida, valor);
}

// Retorna o elemento da frente (O(1) amortizado)
int frente(FilaComPilhas* f, int* valor) {
    if (vazia(&f->saida)) {
        transferir(&f->entrada, &f->saida);
    }
    return topo(&f->saida, valor);
}

// Teste
int main() {
    FilaComPilhas fila;
    inicializar_fila(&fila);

    enfileirar(&fila, 10);
    enfileirar(&fila, 20);
    enfileirar(&fila, 30);

    int val;
    frente(&fila, &val);
    printf("Frente: %d\n", val); // 10

    desenfileirar(&fila, &val);
    printf("Desenfileirado: %d\n", val); // 10

    frente(&fila, &val);
    printf("Nova frente: %d\n", val); // 20

    return 0;
}
